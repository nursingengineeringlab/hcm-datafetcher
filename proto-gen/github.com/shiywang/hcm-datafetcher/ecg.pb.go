// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: ecg.proto

package hcm_datafetcher

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECGPacket_CommandType int32

const (
	ECGPacket_NEW    ECGPacket_CommandType = 0
	ECGPacket_UPDATE ECGPacket_CommandType = 1
	ECGPacket_CLOSE  ECGPacket_CommandType = 2
)

// Enum value maps for ECGPacket_CommandType.
var (
	ECGPacket_CommandType_name = map[int32]string{
		0: "NEW",
		1: "UPDATE",
		2: "CLOSE",
	}
	ECGPacket_CommandType_value = map[string]int32{
		"NEW":    0,
		"UPDATE": 1,
		"CLOSE":  2,
	}
)

func (x ECGPacket_CommandType) Enum() *ECGPacket_CommandType {
	p := new(ECGPacket_CommandType)
	*p = x
	return p
}

func (x ECGPacket_CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECGPacket_CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_ecg_proto_enumTypes[0].Descriptor()
}

func (ECGPacket_CommandType) Type() protoreflect.EnumType {
	return &file_ecg_proto_enumTypes[0]
}

func (x ECGPacket_CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECGPacket_CommandType.Descriptor instead.
func (ECGPacket_CommandType) EnumDescriptor() ([]byte, []int) {
	return file_ecg_proto_rawDescGZIP(), []int{0, 0}
}

type ECGPacket_DataType int32

const (
	ECGPacket_RRI  ECGPacket_DataType = 0
	ECGPacket_TEMP ECGPacket_DataType = 1
	ECGPacket_SPO2 ECGPacket_DataType = 2
)

// Enum value maps for ECGPacket_DataType.
var (
	ECGPacket_DataType_name = map[int32]string{
		0: "RRI",
		1: "TEMP",
		2: "SPO2",
	}
	ECGPacket_DataType_value = map[string]int32{
		"RRI":  0,
		"TEMP": 1,
		"SPO2": 2,
	}
)

func (x ECGPacket_DataType) Enum() *ECGPacket_DataType {
	p := new(ECGPacket_DataType)
	*p = x
	return p
}

func (x ECGPacket_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECGPacket_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_ecg_proto_enumTypes[1].Descriptor()
}

func (ECGPacket_DataType) Type() protoreflect.EnumType {
	return &file_ecg_proto_enumTypes[1]
}

func (x ECGPacket_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECGPacket_DataType.Descriptor instead.
func (ECGPacket_DataType) EnumDescriptor() ([]byte, []int) {
	return file_ecg_proto_rawDescGZIP(), []int{0, 1}
}

type ECGPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command    ECGPacket_CommandType `protobuf:"varint,1,opt,name=command,proto3,enum=ecg.ECGPacket_CommandType" json:"command,omitempty"`
	DeviceId   string                `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SequenceId int32                 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Value      int32                 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Battery    uint32                `protobuf:"varint,5,opt,name=battery,proto3" json:"battery,omitempty"`
	Active     bool                  `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Time       uint64                `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	DataType   ECGPacket_DataType    `protobuf:"varint,8,opt,name=data_type,json=dataType,proto3,enum=ecg.ECGPacket_DataType" json:"data_type,omitempty"`
}

func (x *ECGPacket) Reset() {
	*x = ECGPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECGPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECGPacket) ProtoMessage() {}

func (x *ECGPacket) ProtoReflect() protoreflect.Message {
	mi := &file_ecg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECGPacket.ProtoReflect.Descriptor instead.
func (*ECGPacket) Descriptor() ([]byte, []int) {
	return file_ecg_proto_rawDescGZIP(), []int{0}
}

func (x *ECGPacket) GetCommand() ECGPacket_CommandType {
	if x != nil {
		return x.Command
	}
	return ECGPacket_NEW
}

func (x *ECGPacket) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ECGPacket) GetSequenceId() int32 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *ECGPacket) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ECGPacket) GetBattery() uint32 {
	if x != nil {
		return x.Battery
	}
	return 0
}

func (x *ECGPacket) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ECGPacket) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ECGPacket) GetDataType() ECGPacket_DataType {
	if x != nil {
		return x.DataType
	}
	return ECGPacket_RRI
}

var File_ecg_proto protoreflect.FileDescriptor

var file_ecg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x65, 0x63, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x65, 0x63, 0x67,
	0x22, 0xe9, 0x02, 0x0a, 0x09, 0x45, 0x43, 0x47, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x65, 0x63, 0x67, 0x2e, 0x45, 0x43, 0x47, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x65, 0x63, 0x67, 0x2e, 0x45, 0x43, 0x47, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x02, 0x22, 0x27, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x52, 0x49, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x4f, 0x32, 0x10, 0x02, 0x42, 0x25, 0x5a, 0x23,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x69, 0x79, 0x77,
	0x61, 0x6e, 0x67, 0x2f, 0x68, 0x63, 0x6d, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ecg_proto_rawDescOnce sync.Once
	file_ecg_proto_rawDescData = file_ecg_proto_rawDesc
)

func file_ecg_proto_rawDescGZIP() []byte {
	file_ecg_proto_rawDescOnce.Do(func() {
		file_ecg_proto_rawDescData = protoimpl.X.CompressGZIP(file_ecg_proto_rawDescData)
	})
	return file_ecg_proto_rawDescData
}

var file_ecg_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ecg_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ecg_proto_goTypes = []interface{}{
	(ECGPacket_CommandType)(0), // 0: ecg.ECGPacket.CommandType
	(ECGPacket_DataType)(0),    // 1: ecg.ECGPacket.DataType
	(*ECGPacket)(nil),          // 2: ecg.ECGPacket
}
var file_ecg_proto_depIdxs = []int32{
	0, // 0: ecg.ECGPacket.command:type_name -> ecg.ECGPacket.CommandType
	1, // 1: ecg.ECGPacket.data_type:type_name -> ecg.ECGPacket.DataType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ecg_proto_init() }
func file_ecg_proto_init() {
	if File_ecg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ecg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECGPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ecg_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ecg_proto_goTypes,
		DependencyIndexes: file_ecg_proto_depIdxs,
		EnumInfos:         file_ecg_proto_enumTypes,
		MessageInfos:      file_ecg_proto_msgTypes,
	}.Build()
	File_ecg_proto = out.File
	file_ecg_proto_rawDesc = nil
	file_ecg_proto_goTypes = nil
	file_ecg_proto_depIdxs = nil
}
